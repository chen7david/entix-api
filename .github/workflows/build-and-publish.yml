name: Build and Publish Docker Images

on:
  workflow_run:
    workflows: ['Test']
    types:
      - completed
    branches:
      - main
      - staging
  push:
    branches:
      - main
      - staging
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Ensure Production Test Passed
        if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion != 'success'
        run: exit 1 # Exit if the triggering workflow did not pass

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags

      - name: Set environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi
          echo "environment=${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
            if [[ "${{ env.ENVIRONMENT }}" == "staging" ]]; then
              COMMIT_COUNT=$(git rev-list --count HEAD)
              SHORT_SHA=$(git rev-parse --short HEAD)
              VERSION="${VERSION}-${COMMIT_COUNT}.${SHORT_SHA}"
            fi
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}-${{ env.ENVIRONMENT }}
            type=raw,value=latest-${{ env.ENVIRONMENT }}
            type=raw,value=latest,enable=${{ env.ENVIRONMENT == 'production' && github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}

      - name: Set Jenkins Job Name
        id: job_name
        run: |
          if [[ "${{ env.ENVIRONMENT }}" == "staging" ]]; then
            echo "JENKINS_JOB_NAME=staging-entix-api" >> $GITHUB_ENV
          else
            echo "JENKINS_JOB_NAME=entix-API" >> $GITHUB_ENV
          fi

      - name: Trigger Jenkins Job Webhook
        if: success()
        uses: appleboy/jenkins-action@v1.1.1
        with:
          url: ${{ vars.JENKINS_URL }}
          user: ${{ vars.JENKINS_USER }}
          token: ${{ secrets.JENKINS_TOKEN }}
          job: ${{ env.JENKINS_JOB_NAME }} # Use the dynamically set job name
          params: |
            {
              "IMAGE_TAG": "${{ env.VERSION }}-${{ env.ENVIRONMENT }}"
            }
