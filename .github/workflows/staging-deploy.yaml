name: Staging CI/CD

on:
  push:
    branches: [staging]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  CI:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci || (cat /home/runner/.npm/_logs/* && exit 1)

      - name: Sync test database schema
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: npm run db:push-test

      - name: Run tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          PORT: 3000
          LOG_LEVEL: error
          COGNITO_REGION: us-east-1
          COGNITO_USER_POOL_ID: us-east-1_1234567890
          COGNITO_CLIENT_ID: 1234567890
        run: npm test

  CD:
    name: Build and Push Docker Image
    needs: CI
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=staging-latest
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger Jenkins Job Webhook
        if: success()
        uses: appleboy/jenkins-action@v1.1.1
        with:
          url: ${{ vars.JENKINS_URL }}
          user: ${{ vars.JENKINS_USER }}
          token: ${{ secrets.JENKINS_TOKEN }}
          job: staging-entix-api
